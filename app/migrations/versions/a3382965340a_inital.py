"""inital

Revision ID: a3382965340a
Revises: 
Create Date: 2023-07-08 15:01:40.225189

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'a3382965340a'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('settings',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('minimum_ethereum_in', sa.Float(), nullable=True),
    sa.Column('minimum_usdt_in', sa.Float(), nullable=True),
    sa.Column('minimum_bitcoin_in', sa.Float(), nullable=True),
    sa.Column('minimum_usdt_trc_in', sa.Float(), nullable=True),
    sa.Column('usdt_comission_out_count', sa.Float(), nullable=True),
    sa.Column('eth_comission_out_count', sa.Float(), nullable=True),
    sa.Column('btc_comission_out_count', sa.Float(), nullable=True),
    sa.Column('usdt_trc_comission_out_count', sa.Float(), nullable=True),
    sa.Column('usdt_comission_out_percent', sa.Integer(), nullable=True),
    sa.Column('eth_comission_out_percent', sa.Integer(), nullable=True),
    sa.Column('btc_comission_out_percent', sa.Integer(), nullable=True),
    sa.Column('usdt_trc_comission_out_percent', sa.Integer(), nullable=True),
    sa.Column('erc20_gas_estimate', sa.Integer(), nullable=True),
    sa.Column('usdt_trc_fee_limit', sa.Integer(), nullable=True),
    sa.Column('transaction_active', sa.Enum('not_working', 'pending', 'stoping', name='tasktype'), nullable=True),
    sa.Column('transaction_check_active', sa.Enum('not_working', 'pending', 'stoping', name='tasktype'), nullable=True),
    sa.Column('transaction_bitcoin_wallet_check', sa.Enum('not_working', 'pending', 'stoping', name='tasktype'), nullable=True),
    sa.Column('transaction_trc20_check', sa.Enum('not_working', 'pending', 'stoping', name='tasktype'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_table('webhookerc20alchemies',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('webhook_id', sa.String(), nullable=True),
    sa.Column('address', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_webhookerc20alchemies_webhook_id'), 'webhookerc20alchemies', ['webhook_id'], unique=False)
    op.create_table('wallets',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('network', sa.Enum('bitcoin_network', 'erc20', 'trc20', name='networktype'), nullable=True),
    sa.Column('address', sa.String(), nullable=True),
    sa.Column('public_key', sa.String(), nullable=True),
    sa.Column('private_key', sa.String(), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_wallets_id'), 'wallets', ['id'], unique=False)
    op.create_table('tokenwallets',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('wallet_id', sa.UUID(), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('cryptocurrency', sa.Enum('bitcoin', 'ethereum', 'usdt', 'usdt_trc20', 'trx', name='cryptocurrencytype'), nullable=True),
    sa.Column('balance', sa.BigInteger(), nullable=True),
    sa.Column('actual_wallet_balance', sa.BigInteger(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['wallet_id'], ['wallets.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tokenwallets_id'), 'tokenwallets', ['id'], unique=False)
    op.create_table('cryptocurrencytransactions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('network', sa.Enum('bitcoin_network', 'erc20', 'trc20', name='networktype'), nullable=True),
    sa.Column('cryptocurrency', sa.Enum('bitcoin', 'ethereum', 'usdt', 'usdt_trc20', 'trx', name='cryptocurrencytype'), nullable=True),
    sa.Column('count', sa.BigInteger(), nullable=True),
    sa.Column('receive_address', sa.String(), nullable=True),
    sa.Column('status', sa.Enum('not_send', 'pending', 'success', 'fail', name='statuscryptotransaction'), nullable=True),
    sa.Column('type', sa.Enum('out_system', 'in_system', 'in_wallet', 'comission', name='transactiontype'), nullable=True),
    sa.Column('wallet_crypto_id', sa.UUID(), nullable=True),
    sa.Column('transaction_id', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('start_on_transaction_id', sa.UUID(), nullable=True),
    sa.Column('gas_price', sa.Numeric(precision=30, scale=0), nullable=True),
    sa.Column('text', sa.String(), nullable=True),
    sa.Column('comission', sa.BigInteger(), nullable=True),
    sa.ForeignKeyConstraint(['start_on_transaction_id'], ['cryptocurrencytransactions.id'], ),
    sa.ForeignKeyConstraint(['wallet_crypto_id'], ['tokenwallets.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_cryptocurrencytransactions_id'), 'cryptocurrencytransactions', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_cryptocurrencytransactions_id'), table_name='cryptocurrencytransactions')
    op.drop_table('cryptocurrencytransactions')
    op.drop_index(op.f('ix_tokenwallets_id'), table_name='tokenwallets')
    op.drop_table('tokenwallets')
    op.drop_index(op.f('ix_wallets_id'), table_name='wallets')
    op.drop_table('wallets')
    op.drop_index(op.f('ix_webhookerc20alchemies_webhook_id'), table_name='webhookerc20alchemies')
    op.drop_table('webhookerc20alchemies')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_table('users')
    op.drop_table('settings')
    # ### end Alembic commands ###
